(()=>{"use strict";var e=function(e,s,t,a){return new(t||(t=Promise))((function(r,o){function d(e){try{i(a.next(e))}catch(e){o(e)}}function n(e){try{i(a.throw(e))}catch(e){o(e)}}function i(e){var s;e.done?r(e.value):(s=e.value,s instanceof t?s:new t((function(e){e(s)}))).then(d,n)}i((a=a.apply(e,s||[])).next())}))};function s(s){return e(this,arguments,void 0,(function*({suiAddress:e,petId:s}){const t=`http://localhost:3001/api/user-pet?address=${e}&pet=${s}`,a=yield fetch(t);if(!a.ok)throw new Error((yield a.json()).error||"Failed to fetch pet data");const r=yield a.json();if(!r.pet||!r.assets)throw new Error("Invalid data from backend");return r}))}chrome.runtime.onMessage.addListener(((t,a,r)=>{if("SAVE_ADDRESS_AND_FETCH"===t.type){const{suiAddress:a,petId:o}=t.payload;return chrome.storage.local.set({suiAddress:a,petId:o},(()=>e(void 0,void 0,void 0,(function*(){try{const e=yield s({suiAddress:a,petId:o});chrome.storage.local.set({petData:e},(()=>{chrome.runtime.sendMessage({type:"PET_DATA_UPDATED",payload:e})})),r({status:"success"})}catch(e){chrome.storage.local.remove("petData"),chrome.runtime.sendMessage({type:"PET_DATA_ERROR",payload:e.message}),r({status:"error",message:e.message})}})))),!0}if("FETCH_PET_DATA"===t.type){const{suiAddress:a,petId:o}=t.payload;return e(void 0,void 0,void 0,(function*(){try{const e=yield s({suiAddress:a,petId:o});chrome.storage.local.set({petData:e},(()=>{chrome.runtime.sendMessage({type:"PET_DATA_UPDATED",payload:e})})),r({status:"success"})}catch(e){chrome.storage.local.remove("petData"),chrome.runtime.sendMessage({type:"PET_DATA_ERROR",payload:e.message}),r({status:"error",message:e.message})}})),!0}return"GET_PET_DATA"===t.type&&(chrome.storage.local.get(["petData","suiAddress"],(e=>{chrome.runtime.lastError?r({status:"error",message:"Failed to retrieve data from storage."}):e.petData&&e.suiAddress?r({status:"success",payload:{petData:e.petData,suiAddress:e.suiAddress}}):e.suiAddress?r({status:"pending",message:"Address found, pet data not yet loaded.",payload:{suiAddress:e.suiAddress}}):r({status:"nodata",message:"No pet data or address found in storage."})})),!0)})),chrome.runtime.onStartup.addListener((()=>{chrome.storage.local.get("suiAddress",(t=>{t.suiAddress&&(console.log("Extension startup: Found address, fetching data...",t.suiAddress),e(void 0,void 0,void 0,(function*(){try{const e=yield s(t.suiAddress);chrome.storage.local.set({petData:e},(()=>{chrome.runtime.lastError||chrome.runtime.sendMessage({type:"PET_DATA_UPDATED",payload:e})}))}catch(e){console.error("Startup fetch failed:",e),chrome.runtime.sendMessage({type:"PET_DATA_ERROR",payload:e.message||"Startup fetch failed."})}})))}))})),console.log("Tomodachi Pets Background Script Loaded.")})();